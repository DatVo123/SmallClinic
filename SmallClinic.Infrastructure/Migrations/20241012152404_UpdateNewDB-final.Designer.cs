// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallClinic.Infrastructure.Data;

#nullable disable

namespace SmallClinic.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241012152404_UpdateNewDB-final")]
    partial class UpdateNewDBfinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmallClinic.Domain.Entities.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdmissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("AdmissionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionStatusId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.AdmissionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("AdmissionStatusId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AdmissionLines");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.AdmissionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdmissionStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18b9ad46-c521-425a-a7b7-7c31ce516e31"),
                            Code = "Admitted",
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(1977),
                            IsDeleted = false,
                            Name = "Đã đăng ký"
                        },
                        new
                        {
                            Id = new Guid("c89e94d0-24cd-4af9-8854-80d9c915d0e6"),
                            Code = "Completed",
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(1989),
                            IsDeleted = false,
                            Name = "Hoàn thành"
                        },
                        new
                        {
                            Id = new Guid("2aa31e70-f7ce-4fa9-b6dc-247666f68852"),
                            Code = "Canclled",
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(1991),
                            IsDeleted = false,
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PrommoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrommoteId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.InvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("ServiceId");

                    b.ToTable("InvoicesLine");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.InvoiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoicesStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc7d6e28-fc45-404f-a0ee-bd5723027f10"),
                            Code = "UnPay",
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(2418),
                            IsDeleted = false,
                            Name = "Chờ thu"
                        },
                        new
                        {
                            Id = new Guid("cd142dd1-0c0d-4462-a7d4-2bb88f105d19"),
                            Code = "Paid",
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(2419),
                            IsDeleted = false,
                            Name = "Đã thu"
                        },
                        new
                        {
                            Id = new Guid("86a2ec09-7f74-49cf-a75b-1e201cbe355c"),
                            Code = "Canclled",
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(2437),
                            IsDeleted = false,
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Promote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promote");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmallClinic.Domain.ValueObjects.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67fb44f9-dcd9-4f2b-a14c-ce0134772bb4"),
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(2470),
                            GenderId = "Male",
                            IsDeleted = false,
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("e973b196-96b3-4bae-97e0-73296ff51cbe"),
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(2472),
                            GenderId = "FeMale",
                            IsDeleted = false,
                            Name = "FeMale"
                        },
                        new
                        {
                            Id = new Guid("ff65847a-2482-44cf-95e2-082be86112e4"),
                            CreateDate = new DateTime(2024, 10, 12, 22, 24, 2, 837, DateTimeKind.Local).AddTicks(2473),
                            GenderId = "Other",
                            IsDeleted = false,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Admission", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.AdmissionStatus", "AdmissionStatus")
                        .WithMany()
                        .HasForeignKey("AdmissionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Admissions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmissionStatus");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.AdmissionLine", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.Admission", "Admission")
                        .WithMany("AdmissionLines")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.AdmissionStatus", "AdmissionStatus")
                        .WithMany()
                        .HasForeignKey("AdmissionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admission");

                    b.Navigation("AdmissionStatus");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("SmallClinic.Domain.ValueObjects.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.Admission", "Admission")
                        .WithMany("Invoices")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Promote", "Promote")
                        .WithMany()
                        .HasForeignKey("PrommoteId");

                    b.Navigation("Admission");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("Patient");

                    b.Navigation("Promote");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.InvoiceLine", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Patient", b =>
                {
                    b.HasOne("SmallClinic.Domain.ValueObjects.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Admission", b =>
                {
                    b.Navigation("AdmissionLines");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Speciality", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
