// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallClinic.Infrastructure.Data;

#nullable disable

namespace SmallClinic.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmallClinic.Domain.Entities.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionStatusId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Admissions", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.AdmissionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("AdmissionStatusId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AdmissionLines", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.AdmissionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdmissionStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2c6afd8-ef89-426b-9ac9-fb9a8e0da881"),
                            Code = "Admitted",
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(3714),
                            IsDeleted = false,
                            Name = "Đã đăng ký"
                        },
                        new
                        {
                            Id = new Guid("a5b4151e-09a9-4d06-8b53-9852f1105067"),
                            Code = "Completed",
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(3725),
                            IsDeleted = false,
                            Name = "Hoàn thành"
                        },
                        new
                        {
                            Id = new Guid("99738e6c-1c1b-4886-91a3-a6871db509a3"),
                            Code = "Canclled",
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(3748),
                            IsDeleted = false,
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PrommoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrommoteId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.InvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("ServiceId");

                    b.ToTable("InvoicesLine", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.InvoiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoicesStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("490fc390-0947-455c-abbc-044de806c215"),
                            Code = "UnPay",
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(4194),
                            IsDeleted = false,
                            Name = "Chờ thu"
                        },
                        new
                        {
                            Id = new Guid("ff48794c-1bb5-4141-96df-f12564fdc8f0"),
                            Code = "Paid",
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(4196),
                            IsDeleted = false,
                            Name = "Đã thu"
                        },
                        new
                        {
                            Id = new Guid("ed42da9c-2c0f-4248-b42f-0f78a885593e"),
                            Code = "Canclled",
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(4197),
                            IsDeleted = false,
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Promote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promote", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SmallClinic.Domain.ValueObjects.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a307cc2-6600-4235-bb24-bd1eb92b4d54"),
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(4229),
                            GenderId = "Male",
                            IsDeleted = false,
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("4edebd34-e84b-4876-9799-4e2976aba9c1"),
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(4232),
                            GenderId = "FeMale",
                            IsDeleted = false,
                            Name = "FeMale"
                        },
                        new
                        {
                            Id = new Guid("cc966a91-8c80-41f3-8192-26d0dbfda021"),
                            CreateDate = new DateTime(2024, 10, 13, 23, 22, 58, 358, DateTimeKind.Local).AddTicks(4234),
                            GenderId = "Other",
                            IsDeleted = false,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Admission", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.AdmissionStatus", "AdmissionStatus")
                        .WithMany()
                        .HasForeignKey("AdmissionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Admissions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmissionStatus");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.AdmissionLine", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.Admission", "Admission")
                        .WithMany("AdmissionLines")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.AdmissionStatus", "AdmissionStatus")
                        .WithMany()
                        .HasForeignKey("AdmissionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admission");

                    b.Navigation("AdmissionStatus");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("SmallClinic.Domain.ValueObjects.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.Admission", "Admission")
                        .WithMany("Invoices")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Promote", "Promote")
                        .WithMany()
                        .HasForeignKey("PrommoteId");

                    b.Navigation("Admission");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("Patient");

                    b.Navigation("Promote");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.InvoiceLine", b =>
                {
                    b.HasOne("SmallClinic.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallClinic.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Patient", b =>
                {
                    b.HasOne("SmallClinic.Domain.ValueObjects.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Admission", b =>
                {
                    b.Navigation("AdmissionLines");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("SmallClinic.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Admissions");
                });
#pragma warning restore 612, 618
        }
    }
}
